<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darr_en1&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-05-30T14:26:54.068Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Darr_en1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>playwright流水账笔记</title>
    <link href="http://yoursite.com/2023/05/29/1/"/>
    <id>http://yoursite.com/2023/05/29/1/</id>
    <published>2023-05-29T02:32:28.000Z</published>
    <updated>2023-05-30T14:26:54.068Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在项目中引入了Playwright，这款自动化测试工具现在应该已经名声大噪了。其实早在2020年项目刚开源的时候我就接触到了，它相较于目前最常用的Selenium实在是有太多的优势了，不用为下载各种版本的WebDriver而烦恼，本身就携带网站录制功能，无需下载其他应用，而且背靠微软这么强大的后台，我真的爱不释手，这篇文章主要记录一下我个人使用的一些技巧和踩过的坑
    
    </summary>
    
      <category term="playwright" scheme="http://yoursite.com/categories/playwright/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/playwright/python/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/playwright/python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="playwright" scheme="http://yoursite.com/tags/playwright/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="反爬" scheme="http://yoursite.com/tags/%E5%8F%8D%E7%88%AC/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT很牛,我很慌</title>
    <link href="http://yoursite.com/2023/01/05/1/"/>
    <id>http://yoursite.com/2023/01/05/1/</id>
    <published>2023-01-05T02:24:55.000Z</published>
    <updated>2023-01-30T15:10:26.347Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ChatGPT最近实在太火了，甚至很多圈外的小伙伴都知道了。它非常人性化的对话模型和强大的上下文关联,甚至让我意识不到我是在同一个机器人对话，它甚至可以协助编程，让我一度怀疑可能还没等到35岁毕业就要面临被AI淘汰的尴尬囧境。ChatGPT真的神乎其神，可以取代现有岗位吗? 知己知彼，方能百战不殆，赶紧来认识认识这个强大对手。
    
    </summary>
    
      <category term="ChatGPT" scheme="http://yoursite.com/categories/ChatGPT/"/>
    
    
      <category term="ChatGPT" scheme="http://yoursite.com/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>go error 最佳实践</title>
    <link href="http://yoursite.com/2022/06/10/1/"/>
    <id>http://yoursite.com/2022/06/10/1/</id>
    <published>2022-06-10T08:25:46.000Z</published>
    <updated>2022-07-14T10:29:47.074Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;有别于其他语言错误和异常的概念模糊，Go语言直接从语法层面提供区分错误和异常的机制。错误通常是良性的，程序中可能出现的问题，因此错误处理也被视为业务的一部分。而异常则作为意料之外的存在而出现，通常是毁灭性的，直接导致程序的崩溃。本文将从多方面维度介绍golang 的 error ，实际应用和最佳实践，相信看完这文章后，你对 golang中 error 能有一个全面的理解。&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="golang" scheme="http://yoursite.com/tags/golang/"/>
    
      <category term="error" scheme="http://yoursite.com/tags/error/"/>
    
      <category term="design" scheme="http://yoursite.com/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>mac升级踩坑实录</title>
    <link href="http://yoursite.com/2022/04/15/1/"/>
    <id>http://yoursite.com/2022/04/15/1/</id>
    <published>2022-04-15T07:48:22.000Z</published>
    <updated>2022-04-24T14:19:11.884Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;昨天在家看视频，嫌电脑屏幕太小，奈何没有显示屏，于是拿出自己的ipad当作副屏，可怎么都连不上，emo中下意识看到mac 的系统偏好设置里提醒我mac升级，我个人对于软件版本升级一直是非常热衷的，对新事物的接受程度也是非常高的，于是乎就将mac 进行了版本升级，但但但是呢？还真发现了一堆坑，老泪纵横呀，希望大家也能引以为戒吧！😭😭
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="杂谈" scheme="http://yoursite.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
      <category term="Monterey" scheme="http://yoursite.com/tags/Monterey/"/>
    
  </entry>
  
  <entry>
    <title>微服务</title>
    <link href="http://yoursite.com/2022/04/09/1/"/>
    <id>http://yoursite.com/2022/04/09/1/</id>
    <published>2022-04-09T08:43:34.000Z</published>
    <updated>2022-04-24T14:09:02.877Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;单体架构随着业务体量的增大，应用会变得越发复杂，即便内部模块设计的非常清晰，但也会造成可靠性降低，服务启动慢，单模块无法水平扩展，扩展性差等一系列问题，此时我们需要对其进行拆分。但是从模块直接应用内调用变更成服务之前的调用势必会照成新问题，如测试的依赖，部署的复杂度，通信的时延，如何去有效解决这些问题呢，微服务架构由此而生。
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>kafka docker 安装</title>
    <link href="http://yoursite.com/2022/04/07/1/"/>
    <id>http://yoursite.com/2022/04/07/1/</id>
    <published>2022-04-07T03:01:48.000Z</published>
    <updated>2022-04-09T08:22:00.986Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;想在本地搭建kafka集群，需要保证zookeeper的高可用，整个服务搭建过程比较耗时，且卸载也较为麻烦，如何快速搭建整个kafka集群呢，试一试docker吧！
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>python内部库依赖管理</title>
    <link href="http://yoursite.com/2022/02/18/1/"/>
    <id>http://yoursite.com/2022/02/18/1/</id>
    <published>2022-02-18T08:03:25.000Z</published>
    <updated>2022-02-22T13:45:06.248Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司gitlab 上维护了一些Python内部库，最近出现了一些小毛病，解决的同时借此梳理一下。
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>记一次问题解决过程</title>
    <link href="http://yoursite.com/2021/09/22/1/"/>
    <id>http://yoursite.com/2021/09/22/1/</id>
    <published>2021-09-22T07:06:38.000Z</published>
    <updated>2022-02-22T13:45:06.248Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;测试环境服务器已经挂载了多个分区，可还是出现了磁盘空间不足的警告！那就来看看到底是哪些系统资源占用过大吧。
    
    </summary>
    
      <category term="go" scheme="http://yoursite.com/categories/go/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/go/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>自动化脚本生成错误结果文档</title>
    <link href="http://yoursite.com/2021/04/06/1/"/>
    <id>http://yoursite.com/2021/04/06/1/</id>
    <published>2021-04-06T04:03:24.000Z</published>
    <updated>2021-04-06T15:36:40.852Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;早期项目搭建的时候为了统一接口返回格式，基于werkzeug的HTTPException实现了APIException用于返回json格式，并制定了一套完善的错误码体系，但测试小伙伴对错误码对应的问题类型并不了解，因此需要编写一份文档用于方便查阅错误码和错误的原因。但是每次添加新的错误码都需要同步更新文档，这可不太妙。因此设计一个文档的同步更新机制迫在眉睫
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>韭菜日记</title>
    <link href="http://yoursite.com/2021/03/11/1/"/>
    <id>http://yoursite.com/2021/03/11/1/</id>
    <published>2021-03-11T10:48:05.000Z</published>
    <updated>2021-03-11T12:26:27.203Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近的金融市场哀嚎遍野，作为一个2020年底才入市的小韭菜也可谓是被市场狠狠的上了一课。&lt;br&gt;
但庆幸的是在投资初期就认识到股市的风险。让我对股市抱有敬畏，而不是一味贪婪，这对我之后的理财之路会带来很大的启发和帮助。
    
    </summary>
    
      <category term="理财" scheme="http://yoursite.com/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="理财" scheme="http://yoursite.com/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>选点展示问题的分析与总结</title>
    <link href="http://yoursite.com/2020/12/23/1/"/>
    <id>http://yoursite.com/2020/12/23/1/</id>
    <published>2020-12-23T03:38:44.000Z</published>
    <updated>2020-12-24T09:01:47.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;工作中难免会遇到一些问题，当遭遇问题时，该如何分析并得到解决方案，是对程序员应对问题的能力和对知识的掌握程度的一次考验。我在工作时也遇到了问题，因此我把它记录下来，也算是成长的履历。
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="回调" scheme="http://yoursite.com/tags/%E5%9B%9E%E8%B0%83/"/>
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB中一条update语句到底涉及到了哪些内容呢？</title>
    <link href="http://yoursite.com/2020/12/17/1/"/>
    <id>http://yoursite.com/2020/12/17/1/</id>
    <published>2020-12-17T03:36:18.000Z</published>
    <updated>2020-12-18T09:47:40.087Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;InnoDB在处理更新语句的时候，并不会将数据直接更新到数据库，大量的磁盘操作势必影响数据库的性能，InnoDB是怎么做的呢？InnoDB通过引入内存组件buffer pool从而避免频繁对磁盘做随机读写操作，并引入redo log(写入日志)的机制保证了数据不丢失。采用缓存必然存在缓存不足需要进行内存淘汰,InnoDB则采取一种类似lru的内存淘汰算法。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="lock" scheme="http://yoursite.com/tags/lock/"/>
    
      <category term="buffer pool" scheme="http://yoursite.com/tags/buffer-pool/"/>
    
      <category term="lru" scheme="http://yoursite.com/tags/lru/"/>
    
      <category term="redo log" scheme="http://yoursite.com/tags/redo-log/"/>
    
      <category term="wal" scheme="http://yoursite.com/tags/wal/"/>
    
  </entry>
  
  <entry>
    <title>mysql-lock</title>
    <link href="http://yoursite.com/2020/11/08/1/"/>
    <id>http://yoursite.com/2020/11/08/1/</id>
    <published>2020-11-08T08:39:54.000Z</published>
    <updated>2020-11-17T06:36:13.912Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;锁是计算机协调多个进程或线程并发访问某一资源的机制。而根据加锁的范围，可被分为全局锁、表级锁和行锁。他们都有什么作用呢？有让我们一探究竟吧！
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="lock" scheme="http://yoursite.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>python collections 深入解析</title>
    <link href="http://yoursite.com/2020/09/05/1/"/>
    <id>http://yoursite.com/2020/09/05/1/</id>
    <published>2020-09-05T10:20:54.000Z</published>
    <updated>2020-11-12T09:15:45.688Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;collections是Python内建的一个集合模块，提供了许多有用的集合类。
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="lru" scheme="http://yoursite.com/tags/lru/"/>
    
      <category term="collections" scheme="http://yoursite.com/tags/collections/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>gevent魔法和test中的应用实践</title>
    <link href="http://yoursite.com/2020/08/26/1/"/>
    <id>http://yoursite.com/2020/08/26/1/</id>
    <published>2020-08-26T06:38:59.000Z</published>
    <updated>2020-11-12T09:15:45.691Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;了解异步编程的同学对于gevent一定不会陌生,但大部分人对于gevent可以在不修改任何代码的前提下将原始同步代码更替成异步代码的原理知之甚少。&lt;br&gt;
很多人很胆怯阅读源码,但通过阅读源码，你既能学习到正确的编码规范，也能学习到好的编程思路。&lt;br&gt;
接下来我带领大家一起来揭开gevent这层神秘面纱，及借助gevent思想在项目test中的应用。
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>condition源码解析</title>
    <link href="http://yoursite.com/2020/07/20/1/"/>
    <id>http://yoursite.com/2020/07/20/1/</id>
    <published>2020-07-20T02:42:47.000Z</published>
    <updated>2020-11-12T09:15:45.693Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Condition是一种多线程通信工具，表示多线程下参与数据竞争的线程的一种状态，主要负责多线程环境下对线程的挂起和唤醒工作
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="condition" scheme="http://yoursite.com/tags/condition/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>rlock源码解析</title>
    <link href="http://yoursite.com/2020/07/07/1/"/>
    <id>http://yoursite.com/2020/07/07/1/</id>
    <published>2020-07-07T06:48:12.000Z</published>
    <updated>2020-11-12T09:15:45.695Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;可重入锁RLock允许在&lt;strong&gt;同一线程&lt;/strong&gt;中被多次&lt;strong&gt;acquire&lt;/strong&gt;，我们将一一揭晓它的实现过程。
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="lock" scheme="http://yoursite.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>python中的多继承</title>
    <link href="http://yoursite.com/2020/04/26/1/"/>
    <id>http://yoursite.com/2020/04/26/1/</id>
    <published>2020-04-26T10:04:08.000Z</published>
    <updated>2020-11-12T09:15:45.697Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相信学过java的同学们都知道java并不支持多继承，但python中却是支持多继承的，而且像python社区中非常有名的框架中就疯狂引入多继承来扩展类的功能。python多继承基于mro算法来实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="mro" scheme="http://yoursite.com/tags/mro/"/>
    
  </entry>
  
  <entry>
    <title>redis引用之计数器</title>
    <link href="http://yoursite.com/2020/04/03/1/"/>
    <id>http://yoursite.com/2020/04/03/1/</id>
    <published>2020-04-03T10:16:36.000Z</published>
    <updated>2020-11-12T09:15:45.691Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;当我们的网站上线之后,我们很多时候需要对网站浏览记录进行分析，从而做出对策。&lt;br&gt;
如:我们需要对热点页面进行缓存，因此我们就需要知道页面点击数等等。&lt;br&gt;
由于redis的处理命令做到线程安全，并且支持大量的读写操作，因此将计数器储存到redis里面是一个非常好的方案。
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据结构底层_String</title>
    <link href="http://yoursite.com/2020/03/25/1/"/>
    <id>http://yoursite.com/2020/03/25/1/</id>
    <published>2020-03-25T10:35:26.000Z</published>
    <updated>2020-11-12T09:15:45.693Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;String在Redis中是可变字节数组的形式存在,但它并不是C所提供的原始字符数组。Redis通过自建Simple dynamic string(SDS)实现。
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
</feed>
